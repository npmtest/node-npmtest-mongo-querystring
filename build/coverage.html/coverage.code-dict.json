{"/home/travis/build/npmtest/node-npmtest-mongo-querystring/test.js":"/* istanbul instrument in package npmtest_mongo_querystring */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mongo-querystring/lib.npmtest_mongo_querystring.js":"/* istanbul instrument in package npmtest_mongo_querystring */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_mongo_querystring = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_mongo_querystring = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-mongo-querystring/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-mongo-querystring && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_mongo_querystring */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_mongo_querystring\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_mongo_querystring.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_mongo_querystring.rollup.js'] =\n            local.assetsDict['/assets.npmtest_mongo_querystring.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_mongo_querystring.__dirname + '/lib.npmtest_mongo_querystring.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mongo-querystring/node_modules/mongo-querystring/index.js":"'use strict';\n\nmodule.exports = function MongoQS(options) {\n  const opts = options || {};\n\n  this.ops = opts.ops || ['!', '^', '$', '~', '>', '<', '$in'];\n  this.alias = opts.alias || {};\n  this.blacklist = opts.blacklist || {};\n  this.whitelist = opts.whitelist || {};\n  this.custom = opts.custom || {};\n\n  // String Value Parsing\n  opts.string = opts.string || {};\n  this.string = opts.string || {};\n  this.string.toBoolean = opts.string.toBoolean || true;\n  this.string.toNumber = opts.string.toNumber || true;\n\n  this.keyRegex = opts.keyRegex || /^[a-zæøå0-9-_.]+$/i;\n  this.valRegex = opts.valRegex || /[^a-zæøå0-9-_.* ]/i;\n  this.arrRegex = opts.arrRegex || /^[a-zæøå0-9-_.]+(\\[])?$/i;\n\n  if (this.custom.bbox) {\n    this.custom.bbox = this.customBBOX(this.custom.bbox);\n  }\n\n  if (this.custom.near) {\n    this.custom.near = this.customNear(this.custom.near);\n  }\n\n  if (this.custom.after) {\n    this.custom.after = this.customAfter(this.custom.after);\n  }\n\n  if (this.custom.before) {\n    this.custom.before = this.customBefore(this.custom.before);\n  }\n\n  if (this.custom.between) {\n    this.custom.between = this.customBetween(this.custom.between);\n  }\n\n\n  return this;\n};\n\nmodule.exports.prototype.customBBOX = field => (query, bbox) => {\n  const bboxArr = bbox.split(',');\n\n  if (bboxArr.length === 4) {\n    // Optimize by unrolling the loop\n    bboxArr[0] = parseFloat(bboxArr[0], 10);\n    bboxArr[1] = parseFloat(bboxArr[1], 10);\n    bboxArr[2] = parseFloat(bboxArr[2], 10);\n    bboxArr[3] = parseFloat(bboxArr[3], 10);\n\n    if (!isNaN(bboxArr.reduce((a, b) => a + b))) {\n      query[field] = {\n        $geoWithin: {\n          $geometry: {\n            type: 'Polygon',\n            coordinates: [[\n              [bboxArr[0], bboxArr[1]],\n              [bboxArr[2], bboxArr[1]],\n              [bboxArr[2], bboxArr[3]],\n              [bboxArr[0], bboxArr[3]],\n              [bboxArr[0], bboxArr[1]],\n            ]],\n          },\n        },\n      };\n    }\n  }\n};\n\nmodule.exports.prototype.customNear = field => (query, point) => {\n  const pointArr = point.split(',').map(p => parseFloat(p, 10));\n\n  if (pointArr.length >= 2) {\n    if (!isNaN(pointArr.reduce((a, b) => a + b))) {\n      const max = pointArr[2];\n      const min = pointArr[3];\n\n      query[field] = {\n        $near: {\n          $geometry: {\n            type: 'Point',\n            coordinates: pointArr.splice(0, 2),\n          },\n        },\n      };\n\n      if (!isNaN(max)) {\n        query[field].$near.$maxDistance = max;\n\n        if (!isNaN(min)) {\n          query[field].$near.$minDistance = min;\n        }\n      }\n    }\n  }\n};\n\nfunction parseDate(value) {\n  let date = value;\n\n  if (!isNaN(date)) {\n    if (`${date}`.length === 10) {\n      date = `${date}000`;\n    }\n    date = parseInt(date, 10);\n  }\n\n  date = new Date(date);\n\n  return date;\n}\n\nmodule.exports.prototype.customAfter = field => (query, value) => {\n  const date = parseDate(value);\n\n  if (date.toString() !== 'Invalid Date') {\n    query[field] = {\n      $gte: date.toISOString(),\n    };\n  }\n};\n\nmodule.exports.prototype.customBefore = field => (query, value) => {\n  const date = parseDate(value);\n\n  if (date.toString() !== 'Invalid Date') {\n    query[field] = {\n      $lt: date.toISOString(),\n    };\n  }\n};\n\nmodule.exports.prototype.customBetween = field => (query, value) => {\n  const dates = value.split('|');\n  const afterValue = dates[0];\n  const beforeValue = dates[1];\n\n  const after = parseDate(afterValue);\n  const before = parseDate(beforeValue);\n\n  if (after.toString() !== 'Invalid Date' && before.toString() !== 'Invalid Date') {\n    query[field] = {\n      $gte: after.toISOString(),\n      $lt: before.toISOString(),\n    };\n  }\n};\n\nmodule.exports.prototype.parseString = function parseString(string, array) {\n  let op = string[0] || '';\n  const eq = string[1] === '=';\n  let org = string.substr(eq ? 2 : 1) || '';\n  const val = this.parseStringVal(org);\n\n  const ret = { op, org, value: val };\n\n  switch (op) {\n    case '!':\n      if (array) {\n        ret.field = '$nin';\n      } else if (org === '') {\n        ret.field = '$exists';\n        ret.value = false;\n      } else {\n        ret.field = '$ne';\n      }\n      break;\n    case '>':\n      ret.field = eq ? '$gte' : '$gt';\n      break;\n    case '<':\n      ret.field = eq ? '$lte' : '$lt';\n      break;\n    case '^':\n    case '$':\n    case '~':\n      ret.field = '$regex';\n      ret.options = 'i';\n      ret.value = org.replace(this.valReqex, '');\n\n      switch (op) {\n        case '^':\n          ret.value = `^${val}`;\n          break;\n        case '$':\n          ret.value = `${val}$`;\n          break;\n        default:\n          break;\n      }\n      break;\n    default:\n      ret.org = org = op + org;\n      ret.op = op = '';\n      ret.value = this.parseStringVal(org);\n\n      if (array) {\n        ret.field = '$in';\n      } else if (org === '') {\n        ret.field = '$exists';\n        ret.value = true;\n      } else {\n        ret.field = '$eq';\n      }\n  }\n\n  ret.parsed = {};\n  ret.parsed[ret.field] = ret.value;\n\n  if (ret.options) {\n    ret.parsed.$options = ret.options;\n  }\n\n  return ret;\n};\n\nmodule.exports.prototype.parseStringVal = function parseStringVal(string) {\n  if (this.string.toBoolean && string.toLowerCase() === 'true') {\n    return true;\n  } else if (this.string.toBoolean && string.toLowerCase() === 'false') {\n    return false;\n  } else if (this.string.toNumber && !isNaN(parseInt(string, 10)) &&\n      ((+string - +string) + 1) >= 0) {\n    return parseFloat(string, 10);\n  }\n\n  return string;\n};\n\nmodule.exports.prototype.parse = function parse(query) {\n  const res = {};\n\n  Object.keys(query).forEach((k) => {\n    let key = k;\n    const val = query[key];\n\n    // normalize array keys\n    if (val instanceof Array) {\n      key = key.replace(/\\[]$/, '');\n    }\n\n    // whitelist\n    if (Object.keys(this.whitelist).length && !this.whitelist[key]) {\n      return;\n    }\n\n    // blacklist\n    if (this.blacklist[key]) {\n      return;\n    }\n\n    // alias\n    if (this.alias[key]) {\n      key = this.alias[key];\n    }\n\n    // string key\n    if (typeof val === 'string' && !this.keyRegex.test(key)) {\n      return;\n\n    // array key\n    } else if (val instanceof Array && !this.arrRegex.test(key)) {\n      return;\n    }\n\n    // custom functions\n    if (typeof this.custom[key] === 'function') {\n      this.custom[key].apply(null, [res, val]);\n      return;\n    }\n\n    // array key\n    if (val instanceof Array) {\n      if (this.ops.indexOf('$in') >= 0 && val.length > 0) {\n        res[key] = {};\n\n        for (let i = 0; i < val.length; i += 1) {\n          if (this.ops.indexOf(val[i][0]) >= 0) {\n            const parsed = this.parseString(val[i], true);\n\n            switch (parsed.field) {\n              case '$in':\n              case '$nin':\n                res[key][parsed.field] = res[key][parsed.field] || [];\n                res[key][parsed.field].push(parsed.value);\n                break;\n              case '$regex':\n                res[key].$regex = parsed.value;\n                res[key].$options = parsed.options;\n                break;\n              default:\n                res[key][parsed.field] = parsed.value;\n            }\n          } else {\n            res[key].$in = res[key].$in || [];\n            res[key].$in.push(this.parseStringVal(val[i]));\n          }\n        }\n      }\n\n      return;\n    }\n\n    // value must be a string\n    if (typeof val !== 'string') {\n      return;\n    }\n\n    // field exists query\n    if (!val) {\n      res[key] = { $exists: true };\n\n    // query operators\n    } else if (this.ops.indexOf(val[0]) >= 0) {\n      res[key] = this.parseString(val).parsed;\n\n    // equal operator (no operator)\n    } else {\n      res[key] = this.parseStringVal(val);\n    }\n  });\n\n  return res;\n};\n"}